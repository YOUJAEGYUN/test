# name: CI

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   build-test-and-push:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write   # GHCR 푸시 권한
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up Java 21
#         uses: actions/setup-java@v4
#         with:
#           distribution: temurin
#           java-version: '21'

#       - name: Cache Gradle
#         uses: actions/cache@v4
#         with:
#           path: ~/.gradle/caches
#           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#           restore-keys: ${{ runner.os }}-gradle-

#       - name: Build & Test (make jar)
#         run: ./gradlew clean build

#       - name: Login to GHCR
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Build & Push Docker image
#         id: image
#         run: |
#           IMAGE=ghcr.io/${{ github.repository }}/service-a
#           TAG=${{ github.sha }}
#           docker build -t "$IMAGE:$TAG" .
#           docker push "$IMAGE:$TAG"
#           echo "image=$IMAGE:$TAG" >> $GITHUB_OUTPUT

#       # --- 옵션: 컨테이너 취약점 스캔 (나중에 켜기) ---
#       # - name: Trivy scan
#       #   uses: aquasecurity/trivy-action@0.24.0
#       #   with:
#       #     image-ref: ${{ steps.image.outputs.image }}
#       #     format: 'table'

name: CI (service-a)

on:
  push:
    branches: [ main ]
    paths:
      - 'service-a/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'service-a/**'
      - '.github/workflows/**'

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write    # GHCR push 권한

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('service-a/**/*.gradle*', 'service-a/**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        working-directory: service-a
        run: chmod +x gradlew

      - name: Build & Test (make jar)
        working-directory: service-a
        run: ./gradlew --no-daemon clean build

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker image (service-a)
        id: image
        run: |
          # 리포지토리 이름을 소문자로 바꿔 Docker 규칙 충족
          IMAGE=ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')/service-a
          TAG=${{ github.sha }}
          docker build -t "$IMAGE:$TAG" service-a
          docker push "$IMAGE:$TAG"
          echo "image=$IMAGE:$TAG" >> $GITHUB_OUTPUT

      # --- 옵션: 컨테이너 취약점 스캔 ---
      # - name: Trivy scan
      #   uses: aquasecurity/trivy-action@0.24.0
      #   with:
      #     image-ref: ${{ steps.image.outputs.image }}
      #     format: 'table'
